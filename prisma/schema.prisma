generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

/* ========== USERS ========== */
model User {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique
  name      String
  email     String   @unique
  password  String
  role      String   @default("user") // opsional, boleh dihapus kalau mau pakai logic di controller saja
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  news      News[]   // 1 user memiliki banyak news
}

/* ========== DESTINATIONS ========== */
model Destination {
  id          Int      @id @default(autoincrement())
  uuid        String   @unique
  name        String
  description String   @db.Text
  image       String?  // <- dibuat opsional
  location    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

/* ========== NEWS ========== */
model News {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique
  judul     String
  konten    String   @db.Text
  image     String?  // <- dibuat opsional
  userId    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User?    @relation(fields: [userId], references: [id])
}

/* ========== RESERVASI ========== */
model Reservasi {
  id                Int      @id @default(autoincrement())
  judul             String
  deskripsi_singkat String
  image             String?   // <- dibuat opsional
  nomor_whatsapp    String?   // <- dibuat opsional
  pesan_whatsapp    String?   @db.Text // <- dibuat opsional
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

/* ========== SESSIONS (untuk PrismaSessionStore) ========== */
model Session {
  id        String @id
  data      String
  expiresAt BigInt

  @@index([expiresAt])
  @@map("sessions")
}
